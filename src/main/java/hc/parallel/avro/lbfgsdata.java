/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package hc.parallel.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class lbfgsdata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"lbfgsdata\",\"namespace\":\"parallel.avro\",\"fields\":[{\"name\":\"response\",\"type\":\"int\"},{\"name\":\"features\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"entry\",\"fields\":[{\"name\":\"index\",\"type\":\"int\"},{\"name\":\"value\",\"type\":\"float\"}]}}},{\"name\":\"weight\",\"type\":\"float\",\"default\":1.0},{\"name\":\"offset\",\"type\":\"float\",\"default\":0.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int response;
  @Deprecated public java.util.List<hc.parallel.avro.entry> features;
  @Deprecated public float weight;
  @Deprecated public float offset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public lbfgsdata() {}

  /**
   * All-args constructor.
   */
  public lbfgsdata(java.lang.Integer response, java.util.List<hc.parallel.avro.entry> features, java.lang.Float weight, java.lang.Float offset) {
    this.response = response;
    this.features = features;
    this.weight = weight;
    this.offset = offset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return response;
    case 1: return features;
    case 2: return weight;
    case 3: return offset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: response = (java.lang.Integer)value$; break;
    case 1: features = (java.util.List<hc.parallel.avro.entry>)value$; break;
    case 2: weight = (java.lang.Float)value$; break;
    case 3: offset = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'response' field.
   */
  public java.lang.Integer getResponse() {
    return response;
  }

  /**
   * Sets the value of the 'response' field.
   * @param value the value to set.
   */
  public void setResponse(java.lang.Integer value) {
    this.response = value;
  }

  /**
   * Gets the value of the 'features' field.
   */
  public java.util.List<hc.parallel.avro.entry> getFeatures() {
    return features;
  }

  /**
   * Sets the value of the 'features' field.
   * @param value the value to set.
   */
  public void setFeatures(java.util.List<hc.parallel.avro.entry> value) {
    this.features = value;
  }

  /**
   * Gets the value of the 'weight' field.
   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Float value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'offset' field.
   */
  public java.lang.Float getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Float value) {
    this.offset = value;
  }

  /** Creates a new lbfgsdata RecordBuilder */
  public static hc.parallel.avro.lbfgsdata.Builder newBuilder() {
    return new hc.parallel.avro.lbfgsdata.Builder();
  }
  
  /** Creates a new lbfgsdata RecordBuilder by copying an existing Builder */
  public static hc.parallel.avro.lbfgsdata.Builder newBuilder(hc.parallel.avro.lbfgsdata.Builder other) {
    return new hc.parallel.avro.lbfgsdata.Builder(other);
  }
  
  /** Creates a new lbfgsdata RecordBuilder by copying an existing lbfgsdata instance */
  public static hc.parallel.avro.lbfgsdata.Builder newBuilder(hc.parallel.avro.lbfgsdata other) {
    return new hc.parallel.avro.lbfgsdata.Builder(other);
  }
  
  /**
   * RecordBuilder for lbfgsdata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<lbfgsdata>
    implements org.apache.avro.data.RecordBuilder<lbfgsdata> {

    private int response;
    private java.util.List<hc.parallel.avro.entry> features;
    private float weight;
    private float offset;

    /** Creates a new Builder */
    private Builder() {
      super(hc.parallel.avro.lbfgsdata.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(hc.parallel.avro.lbfgsdata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.response)) {
        this.response = data().deepCopy(fields()[0].schema(), other.response);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.features)) {
        this.features = data().deepCopy(fields()[1].schema(), other.features);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.weight)) {
        this.weight = data().deepCopy(fields()[2].schema(), other.weight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing lbfgsdata instance */
    private Builder(hc.parallel.avro.lbfgsdata other) {
            super(hc.parallel.avro.lbfgsdata.SCHEMA$);
      if (isValidValue(fields()[0], other.response)) {
        this.response = data().deepCopy(fields()[0].schema(), other.response);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.features)) {
        this.features = data().deepCopy(fields()[1].schema(), other.features);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.weight)) {
        this.weight = data().deepCopy(fields()[2].schema(), other.weight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'response' field */
    public java.lang.Integer getResponse() {
      return response;
    }
    
    /** Sets the value of the 'response' field */
    public hc.parallel.avro.lbfgsdata.Builder setResponse(int value) {
      validate(fields()[0], value);
      this.response = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'response' field has been set */
    public boolean hasResponse() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'response' field */
    public hc.parallel.avro.lbfgsdata.Builder clearResponse() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'features' field */
    public java.util.List<hc.parallel.avro.entry> getFeatures() {
      return features;
    }
    
    /** Sets the value of the 'features' field */
    public hc.parallel.avro.lbfgsdata.Builder setFeatures(java.util.List<hc.parallel.avro.entry> value) {
      validate(fields()[1], value);
      this.features = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'features' field has been set */
    public boolean hasFeatures() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'features' field */
    public hc.parallel.avro.lbfgsdata.Builder clearFeatures() {
      features = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Float getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public hc.parallel.avro.lbfgsdata.Builder setWeight(float value) {
      validate(fields()[2], value);
      this.weight = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'weight' field */
    public hc.parallel.avro.lbfgsdata.Builder clearWeight() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'offset' field */
    public java.lang.Float getOffset() {
      return offset;
    }
    
    /** Sets the value of the 'offset' field */
    public hc.parallel.avro.lbfgsdata.Builder setOffset(float value) {
      validate(fields()[3], value);
      this.offset = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'offset' field has been set */
    public boolean hasOffset() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'offset' field */
    public hc.parallel.avro.lbfgsdata.Builder clearOffset() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public lbfgsdata build() {
      try {
        lbfgsdata record = new lbfgsdata();
        record.response = fieldSetFlags()[0] ? this.response : (java.lang.Integer) defaultValue(fields()[0]);
        record.features = fieldSetFlags()[1] ? this.features : (java.util.List<hc.parallel.avro.entry>) defaultValue(fields()[1]);
        record.weight = fieldSetFlags()[2] ? this.weight : (java.lang.Float) defaultValue(fields()[2]);
        record.offset = fieldSetFlags()[3] ? this.offset : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
